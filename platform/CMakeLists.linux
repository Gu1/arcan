set (PLATFORM_PATH ${CMAKE_SOURCE_DIR}/platform/posix)

set (PLATFORM_SOURCES
${PLATFORM_PATH}/fmt_open.c
${PLATFORM_PATH}/glob.c
${PLATFORM_PATH}/map_resource.c
${PLATFORM_PATH}/resource_io.c
${PLATFORM_PATH}/ilaunch.c
${PLATFORM_PATH}/strip_traverse.c
${PLATFORM_PATH}/paths.c
${PLATFORM_PATH}/sem.c
${PLATFORM_PATH}/shm.c
${PLATFORM_PATH}/time.c
${PLATFORM_PATH}/warning.c
${PLATFORM_PATH}/frameserver.c
)

set (FSRV_PLATFORM_SOURCES
${PLATFORM_PATH}/warning.c
${PLATFORM_PATH}/time.c
${PLATFORM_PATH}/sem.c
${PLATFORM_PATH}/shm.c
)

add_definitions(-D_LINUX)

if (VIDEO_PLATFORM STREQUAL "egl")

# detect broadcom (rpi) etc. and add appropriate flags
	if (EXISTS "/opt/vc/include/bcm_host.h")
		message(STATUS "EGL: bcm_host detected, enabling raspberry pi / broadcom support")
		include_directories(/opt/vc/include/interface/vcos/pthreads)
		include_directories(/opt/vc/include)
		include_directories(/opt/vc/include/interface/vmcs_host/linux)
		include_directories(/opt/vc/include/GLES2)
		set_property(SOURCE ${PLATFORM_PATH}/../egl/video.c
			APPEND PROPERTY COMPILE_DEFINITIONS RPI_BCM) 

		set(GL_LIBRARIES	
			/opt/vc/lib/libGLESv2.so 
			/opt/vc/lib/libbcm_host.so
			/opt/vc/lib/libEGL.so
		)
	else()
		set (GL_LIBRARIES
			GLESv2
      EGL
		)
		set(ENABLE_LIBRETRO3D FALSE)
	endif()

	list(APPEND MAIN_LIBRARIES ${GL_LIBRARIES})
	list(APPEND PLATFORM_SOURCES ${PLATFORM_PATH}/../egl/video.c)
	add_definitions(-DGL_HEADERS=\"${PLATFORM_PATH}/../egl/glheaders.h\")

	if (${ENABLE_LIBRETRO})
	if (${ENABLE_LIBRETRO3D})
		list(APPEND FSRV_LIBRETRO_SOURCES 
			${PLATFORM_PATH}/../egl/video.c)
		list(APPEND FSRV_LIBRETRO_LIBRARIES
			${GL_LIBRARIES} 
		)
	endif(${ENABLE_LIBRETRO3D})
	endif(${ENABLE_LIBRETRO})

elseif(VIDEO_PLATFORM STREQUAL "sdl")
	add_definitions(-DGL_HEADERS=\"${PLATFORM_PATH}/../sdl/glheaders.h\")
	list(APPEND PLATFORM_SOURCES ${PLATFORM_PATH}/../sdl/video.c)

	if (${ENABLE_LIBRETRO})
	if (${ENABLE_LIBRETRO3D})
		list(APPEND FSRV_LIBRETRO_SOURCES 
			${PLATFORM_PATH}/../sdl/video_mini.c)
		list(APPEND FSRV_LIBRETRO_LIBRARIES 
			${SDL_LIBRARY} 
			${GLEW_LIBRARY} 
			${OPENGL_gl_LIBRARY}
		)
	endif()
	endif()
endif()

if (INPUT_PLATFORM STREQUAL "sdl")
	list(APPEND PLATFORM_SOURCES
		${PLATFORM_PATH}/../sdl/event.c
	)
elseif (INPUT_PLATFORM STREQUAL "linux")
	list(APPEND PLATFORM_SOURCES
		${PLATFORM_PATH}/../linux/event.c
	)
else()
	message(FATAL_ERROR "Linux: Unsupported input platform (${INPUT_PLATFORM})")
endif()

LIST(APPEND FSRV_SOURCES frameserver/frameserver.c) 
LIST(APPEND STDLIB
 dl
 rt)
include(${PLATFORM_PATH}/../CMakeLists.fsrv)

add_definitions(-DPLATFORM_HEADER=\"${PLATFORM_PATH}/platform.h\"
	-Wall -Wno-missing-braces -DCLOCK_SOURCE_RAW -DLUA_51 -D__UNIX
	-D_POSIX_C_SOURCE -D_GNU_SOURCE)

#
# Uncomment if you want ctags output generated
# 
# find_program(GENERATE_TAGS ctags)
#if (GENERATE_TAGS)
#	message("--> ctags command found, generating tags output")
#	set_source_files_properties( ctags.output PROPERTIES GENERATED true )
#	add_custom_command( OUTPUT ctags.output
#		COMMAND ctags -R --fields=+iaS --extra=+q -o ctags.output .
#		WORKING_DIRECTORY ${CMAKE_SOURCE_DIR} )
#	LIST(APPEND SOURCES ctags.output)
#endif (GENERATE_TAGS)

LIST(APPEND SOURCES 
	${CMAKE_EXTERNAL_SRCDIR}/hidapi/hid_linux.c
	${CMAKE_EXTERNAL_SRCDIR}/hidapi/hidapi.h
 	engine/arcan_target_launcher.c 
)
LIST(APPEND SOURCES ${PLATFORM_SOURCES})

LIST(APPEND MAIN_LIBRARIES udev) 

SET(HIJACK_SOURCES
	hijack/arcan_target_unix.c
	hijack/arcan_target.c
  shmif/arcan_shmif.h	
	shmif/arcan_shmif_interop.h
	shmif/arcan_shmif_control.c 
	shmif/arcan_shmif_interop.c
	${PLATFORM_PATH}/warning.c
	${PLATFORM_PATH}/sem.c
	frameserver/ntsc/snes_ntsc.c
 	frameserver/resampler/resample.c
)

add_library(arcan_hijack SHARED ${HIJACK_SOURCES}) 

set_property(TARGET arcan_hijack APPEND PROPERTY 
	COMPILE_DEFINITIONS ENABLE_X11HIJACK ENABLE_WINE_HIJACK)

target_link_libraries(arcan_hijack 
	${STDLIB} 
	${SDL_LIBRARY} 
	${OPENGL_gl_LIBRARY}
)

set(BIN_DST ${CMAKE_INSTALL_PREFIX}/bin)
set(THEME_DST ${CMAKE_INSTALL_PREFIX}/share/arcan/themes)
set(RESOURCES_DST ${CMAKE_INSTALL_PREFIX}/share/arcan/resources)

add_executable( arcan ${SOURCES} )

install(TARGETS arcan_hijack DESTINATION ${CMAKE_INSTALL_PREFIX}/lib)

if (ENABLE_32BITHIJACK)
	message("(*) 64-bit target detected, building compat. 32-bit hijack library")

	add_library(arcan_hijack32 SHARED ${HIJACK_SOURCES})

	set_property(TARGET arcan_hijack32 APPEND PROPERTY 
		COMPILE_FLAGS "-m32")
	set_property(TARGET arcan_hijack32 APPEND PROPERTY 
		COMPILE_DEFINITIONS ENABLE_X11HIJACK ENABLE_WINE_HIJACK)
	 	target_link_libraries(arcan_hijack32 ${STDLIB} -m32 )
	install(TARGETS arcan_hijack32 DESTINATION ${CMAKE_INSTALL_PREFIX}/lib)
endif (ENABLE_32BITHIJACK)

install(FILES ${CMAKE_SOURCE_DIR}/utils/arcan_romman.rb DESTINATION ${BIN_DST} 
	PERMISSIONS 
		WORLD_READ WORLD_EXECUTE 
		OWNER_WRITE OWNER_READ OWNER_EXECUTE 
		GROUP_READ GROUP_EXECUTE
)

install(FILES ${CMAKE_SOURCE_DIR}/doc/arcan.1 
	DESTINATION /usr/local/share/man/man1
)

